/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package br.com.marteleto.esporte.servico.controller.interfaces;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import br.com.marteleto.esporte.servico.ds.GrupoDS;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2018-11-09T10:18:31.039Z[GMT]")

@Api(value = "grupos", description = "the grupos API")
public interface IGrupoController {

    @ApiOperation(value = "Atualiza um grupo existente.", nickname = "atualizarGrupo", notes = "", tags={ "grupos", })
    @ApiResponses(value = { 
    	@ApiResponse(code = 200, message = "Operação realizada com sucesso.", response = GrupoDS.class),
        @ApiResponse(code = 400, message = "O ID do grupo informado é inválido."),
        @ApiResponse(code = 404, message = "Grupo não encontrado."),
        @ApiResponse(code = 405, message = "Falha na validação.") })
    @RequestMapping(value = "/grupos",
    	produces = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<GrupoDS> atualizarGrupo(@ApiParam(value = "Objeto utilizado para tranferência de dados." ,required=true )  @Valid @RequestBody GrupoDS body);

    
    @ApiOperation(value = "Localiza todos os grupos.", nickname = "buscarGrupos", notes = "Retorna uma lista de grupos.", response = List.class, tags={ "grupos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operação realizada com sucesso.", response = List.class) })
    @RequestMapping(value = "/grupos",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<GrupoDS>> buscarGrupos();
    

    @ApiOperation(value = "Exclui um grupo pelo ID.", nickname = "excluirGrupo", notes = "", tags={ "grupos", })
    @ApiResponses(value = { 
    	@ApiResponse(code = 200, message = "Operação realizada com sucesso."),
        @ApiResponse(code = 400, message = "O ID do grupo informado é inválido."),
        @ApiResponse(code = 404, message = "Grupo não encontrado.") })
    @RequestMapping(value = "/grupos/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> excluirGrupo(@ApiParam(value = "Id do grupo a ser excluido.",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Inclui um novo grupo.", nickname = "incluirGrupo", notes = "", tags={ "grupos", })
    @ApiResponses(value = { 
    	@ApiResponse(code = 201, message = "Operação realizada com sucesso.", response = GrupoDS.class),
        @ApiResponse(code = 405, message = "Entrada Inválida.") })
    @RequestMapping(value = "/grupos",
    	produces = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<GrupoDS> incluirGrupo(@ApiParam(value = "Objeto utilizado para tranferência de dados." ,required=true )  @Valid @RequestBody GrupoDS body);


    @ApiOperation(value = "Localiza um grupo pelo ID.", nickname = "recuperarGrupoPorId", notes = "Retorna um único grupo.", response = GrupoDS.class, tags={ "grupos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operação realizada com sucesso.", response = GrupoDS.class),
        @ApiResponse(code = 400, message = "O ID do grupo informado é inválido."),
        @ApiResponse(code = 404, message = "Grupo não encontrado.") })
    @RequestMapping(value = "/grupos/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GrupoDS> recuperarGrupoPorId(@ApiParam(value = "ID do grupo.",required=true) @PathVariable("id") Long id);

}
